// simple coinbase 1
transaction T_input1 {
    input = _
    output = 1 BTC: fun(x) . x == 42
}

// simple coinbase 2
transaction T_input2 {
    input = _
    output = 1 BTC: fun(x) . x != 0
}

// focus on this transaction
transaction T {
    input = [
        T_input1 : 42;
        T_input2 : 1
    ]
    output = 2 BTC: fun(x) . x == 1001
}

transaction T_differentWitness {
    input = [
        T_input1 : 42;
        T_input2 : 84           // instead of 1
    ]
    output = 2 BTC: fun(x) . x == 1001
}

transaction T_sameInput {
    input = [
        T_input1 : 42;
        T_input2 : 1
    ]
    output = [
        2 BTC: fun(x) . x == 1001;
        0 BTC: "Hello world"    // extra output (not present in T)
    ]
}

transaction T_sameOutput {
    input = [                   // inputs are swapped
        T_input2 : 1;
        T_input1 : 42
    ]
    output = 2 BTC: fun(x) . x == 1001
}

// a random private key
const kA = key:cRfPMbgvC4NNd3FZZeoQB2GmZJ2tJAPeNwJh9Bs27S2Csak72j46

// Signatures have modifiers
// "sig(kA) of T" by default sign All Inputs ans All Outputs (AIAO) of T
assert sig(kA) of T == sig(kA)[AIAO] of T

// Signatures ignore the witness
assert T != T_differentWitness
assert sig(kA) of T == sig(kA) of T_differentWitness

// Signatures are specific to the input position in which they will be put
// "sig(kA) of T" by default is bound to position 0
assert sig(kA) of T == sig(kA) of T@0
assert sig(kA) of T != sig(kA) of T@1

// Signature can also sign a single output or none
assert T != T_sameInput                                     : "transactions are different"
assert sig(kA) of T != sig(kA) of T_sameInput               : "signatures AIAO are different"
assert sig(kA)[AINO] of T == sig(kA)[AINO] of T_sameInput   : "because it ignores all the outputs"
assert sig(kA)[AISO] of T == sig(kA)[AISO] of T_sameInput   : "because it only considers output 0, which is the same"

// Signatures can also sign a single input
// Signing a single input also implies that the signatures is not bound to a specific position
assert T != T_sameOutput                                        : "transactions are different"
assert sig(kA) of T != sig(kA) of T_sameOutput                  : "signatures AIAO are different"
assert sig(kA)[SIAO] of T != sig(kA)[SIAO] of T_sameOutput      : "input 0 is different"
assert sig(kA)[SIAO] of T == sig(kA)[SIAO] of T_sameOutput@1    : "input is the same"
assert sig(kA)[SIAO] of T@1 == sig(kA)[SIAO] of T_sameOutput    : "input is the same"

