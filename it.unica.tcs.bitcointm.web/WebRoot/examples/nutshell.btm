transaction T {
    input = _    // no input 
    output = 50 BTC: fun(x) . x==42
}

 transaction T1 {
    input = T: 42
    output = 50 BTC: fun(x). x != 0  // any constraint choosen by the user
}

// Alice's pubkey
const kApub = pubkey:0248653a4ed0b1f71d51d453ab380348e791205bb0bd3fc8b19ac65b13530bcc63

transaction T2 {
    input = T1: 12
    output = 50 BTC: fun(x) . versig(kApub; x)
}

//Alice's private key    
const kA = key:cW6KUESJMsPhHfvvj6RViQbt4wHomJTHiifQWNbrixrxBKkbesyM

transaction T3 {
    input = T2: sig(kA)
    output = 50 BTC: fun(x) . versig(kApub; x) // any condition chosen by Alice
}

//Alice's other public key
const kApub2 = pubkey:024672b26126d71dd524ae8f60c99ae38af25984f74107b6e60c25d58582eec81a

transaction T4 {
    input = T3:sig(kA) 
    output = [
                     40 BTC: fun(x) . versig(kApub; x);
                     10 BTC: fun(x) . versig(kApub2; x)
        ]
}

//Alice's second private key
const kA2= key:cMgw94UfbDLDkqNgUyu7ZcCsYKXkofb2s3uRfhpB973RubSgrMWT

transaction T5 {
    input = [
        T4@0: sig(kA);
        T4@1: sig(kA2)
        ]
    output = 50 BTC: fun(x) . versig(kApub; x)
}

// parametric transaction
transaction T6(k:pubkey) {
    input = _
    output = 1BTC: fun(x). versig(k;x)
}

// Bob's public key
const kBpub = pubkey:03a5aded4cfa04cb4b49d4b19fe8fac0b58802983018cdd895a28b643e7510c1fb

transaction T7 {
    input = T6(kApub):sig(kA)
    output = 1BTC: fun(x). versig(kBpub;x)
}

transaction T8(s:signature, n:int) {
    input = T7:s 
    output = 1BTC: fun(x, m). versig(kApub;x) && m == sha256( n )
}
//transaction with empty signature
const T9 = T8(_, 4)

transaction T9_bis(n:int) {
    input = T6(kApub):sig(kA)
    output = 1BTC: fun(x, m). versig(kBpub;x) && m == sha256( n )
}


eval T1, T2, T3, T4, T5, T6(kApub), T7, T8(_,4), T9, T9_bis(4)