/*
 * Copyright 2017 Nicola Atzei
 */

import com.google.common.base.Throwables
import it.unica.tcs.balzac.AddressLiteral
import it.unica.tcs.balzac.AddressType
import it.unica.tcs.balzac.AndExpression
import it.unica.tcs.balzac.ArithmeticSigned
import it.unica.tcs.balzac.BalzacFactory
import it.unica.tcs.balzac.Between
import it.unica.tcs.balzac.BitcoinValue
import it.unica.tcs.balzac.BooleanLiteral
import it.unica.tcs.balzac.BooleanNegation
import it.unica.tcs.balzac.BooleanType
import it.unica.tcs.balzac.Comparison
import it.unica.tcs.balzac.Constant
import it.unica.tcs.balzac.DateLiteral
import it.unica.tcs.balzac.DayLiteral
import it.unica.tcs.balzac.Div
import it.unica.tcs.balzac.Equals
import it.unica.tcs.balzac.Hash160
import it.unica.tcs.balzac.Hash256
import it.unica.tcs.balzac.HashLiteral
import it.unica.tcs.balzac.HashType
import it.unica.tcs.balzac.HourLiteral
import it.unica.tcs.balzac.IfThenElse
import it.unica.tcs.balzac.IntType
import it.unica.tcs.balzac.Interpretable
import it.unica.tcs.balzac.KeyLiteral
import it.unica.tcs.balzac.KeyType
import it.unica.tcs.balzac.Max
import it.unica.tcs.balzac.Min
import it.unica.tcs.balzac.Minus
import it.unica.tcs.balzac.MinuteLiteral
import it.unica.tcs.balzac.NumberLiteral
import it.unica.tcs.balzac.OrExpression
import it.unica.tcs.balzac.Parameter
import it.unica.tcs.balzac.Placeholder
import it.unica.tcs.balzac.Plus
import it.unica.tcs.balzac.PubKeyLiteral
import it.unica.tcs.balzac.PubkeyType
import it.unica.tcs.balzac.Reference
import it.unica.tcs.balzac.Ripemd160
import it.unica.tcs.balzac.Sha1
import it.unica.tcs.balzac.Sha256
import it.unica.tcs.balzac.Signature
import it.unica.tcs.balzac.SignatureLiteral
import it.unica.tcs.balzac.SignatureType
import it.unica.tcs.balzac.Size
import it.unica.tcs.balzac.StringLiteral
import it.unica.tcs.balzac.StringType
import it.unica.tcs.balzac.This
import it.unica.tcs.balzac.Times
import it.unica.tcs.balzac.ToAddress
import it.unica.tcs.balzac.ToPubkey
import it.unica.tcs.balzac.Transaction
import it.unica.tcs.balzac.TransactionFees
import it.unica.tcs.balzac.TransactionHexLiteral
import it.unica.tcs.balzac.TransactionIDLiteral
import it.unica.tcs.balzac.TransactionInputOperation
import it.unica.tcs.balzac.TransactionOutputOperation
import it.unica.tcs.balzac.TransactionType
import it.unica.tcs.lib.model.Hash
import it.unica.tcs.lib.model.Hash.HashAlgorithm
import it.unica.tcs.lib.ITransactionBuilder
import it.unica.tcs.lib.utils.BitcoinUtils
import it.unica.tcs.utils.ASTUtils
import it.unica.tcs.utils.BalzacLogger
import it.unica.tcs.utils.BitcoinClientFactory
import it.unica.tcs.lib.model.Address
import it.unica.tcs.lib.model.PlaceholderUtils
import it.unica.tcs.lib.model.PrivateKey
import it.unica.tcs.lib.model.PublicKey
import java.math.BigInteger
import java.security.KeyStoreException
import org.bitcoinj.core.ECKey
import org.bitcoinj.core.Utils
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.EcoreUtil2
import org.slf4j.LoggerFactory
import it.unica.tcs.balzac.TransactionId

system it.unica.tcs.xsemantics.BalzacInterpreter

inject extension ASTUtils astUtils
inject extension TransactionCompilerDelegate compiler
inject extension ScriptCompilerDelegate scriptCompiler
inject BitcoinClientFactory clientFactory

val logger = new BalzacLogger(LoggerFactory.getLogger(BalzacInterpreter))

judgments {
    interpret |- Interpretable expression |> Rho rho ~> output Object
    interpretE |- Interpretable expression ~> output Object
}


/*
 * Interpret with an empty rho
 */
rule InterpretE
    G |- Interpretable v ~> Object res
from {
    G |- v |> new Rho(v.networkParams) ~> res
}

/*
 * Interpret
 */
rule InterpretThis
    G |- This thiz |> Rho rho ~> Object res
from {
    val tx = EcoreUtil2.getContainerOfType(thiz, Transaction)
    val ref = BalzacFactory.eINSTANCE.createReference
    ref.ref = tx
    for (e : thiz.actualParams) {
        ref.actualParams.add(EcoreUtil::copy(e))
    }
    G |- ref |> rho ~> res
}

rule InterpretReference
    G |- Reference v |> Rho rho ~> Object res
from {
    if (rho.isAlreadyVisited(v.ref)) {
        fail
            error "Found cyclic dependency"
            source v
    }

    if (logger.isTraceEnabled) {
        logger.trace("INTERPRET: "+astUtils.nodeToString(v)+" ("+v.ref.class.simpleName+")"+" rho:"+rho)
        logger.increasePrefixCount
    }

    if (v.ref instanceof Transaction) {
        val tx = v.ref as Transaction

        // create a fresh rho to evaluate T
        val newRho = rho.fresh
        for (var i=0; i<v.actualParams.size; i++) {
            val actual = v.actualParams.get(i)
            val formal = tx.params.get(i)

            G |- actual |> rho ~> var Object value
            newRho.put(formal, value)
        }
        G |- tx |> newRho ~> res
    }
    else if (v.ref instanceof Constant) {
        // Constant
        val const = v.ref as Constant
        G |- (const.exp as Interpretable) |> rho.fresh ~> res
    }
    else if (v.ref instanceof Parameter) {
        // Parameter
        val param = v.ref as Parameter
        { rho.containsKey(param) }
        res = rho.get(param)
    }
    
    if (logger.isTraceEnabled) {
        logger.decreasePrefixCount
        logger.trace("RESULT: "+res)
    }
}

rule InterpretPlaceholder
    G |- Placeholder p |> Rho rho ~> Object obj
from {
    if (p.type instanceof IntType) {
        obj = PlaceholderUtils.INT
    } else if (p.type instanceof StringType) {
        obj = PlaceholderUtils.STRING
    } else if (p.type instanceof BooleanType) {
        obj = PlaceholderUtils.BOOLEAN
    } else if (p.type instanceof HashType) {
        obj = PlaceholderUtils.HASH
    } else if (p.type instanceof KeyType) {
        obj = PlaceholderUtils.KEY(rho.networkParams)
    } else if (p.type instanceof PubkeyType) {
        obj = PlaceholderUtils.PUBKEY(rho.networkParams)
    } else if (p.type instanceof AddressType) {
        obj = PlaceholderUtils.ADDRESS(rho.networkParams)
    } else if (p.type instanceof TransactionType) {
        obj = PlaceholderUtils.TX(rho.networkParams)
    } else if (p.type instanceof SignatureType) {
        obj = PlaceholderUtils.SIGNATURE
    } else {
        fail
            error "Cannot interpret placeholder with type "+stringRep(p.type)
            source p
    }
}

axiom InterpretNumberLiteral
    G |- NumberLiteral number |> Rho rho ~> number.value

axiom InterpretStringLiteral
    G |- StringLiteral str |> Rho rho ~> str.value

axiom InterpretBooleanLiteral
    G |- BooleanLiteral bool |> Rho rho ~> bool.^true

axiom InterpretHashLiteral
    G |- HashLiteral hash |> Rho rho ~> new Hash(hash.value)

rule InterpretSignatureLiteral
    G |- SignatureLiteral s |> Rho rho ~> it.unica.tcs.lib.model.Signature sig
from {
	sig = new it.unica.tcs.lib.model.Signature(BitcoinUtils.decode(s.value), null)

	if (s.pubkey !== null) {
		G |- s.pubkey |> rho ~> var PublicKey key		
		sig.pubkey = key.publicKeyByte
	}
}

axiom InterpretDateLiteral
    G |- DateLiteral d |> Rho rho ~> d.value

axiom InterpretMinuteLiteral
    G |- MinuteLiteral d |> Rho rho ~> d.value.longValue

axiom InterpretHourLiteral
    G |- HourLiteral d |> Rho rho ~> d.value.longValue

axiom InterpretDayLiteral
    G |- DayLiteral d |> Rho rho ~> d.value.longValue

axiom InterpretTransactionHexLiteral
    G |- TransactionHexLiteral tx |> Rho rho ~> ITransactionBuilder.fromSerializedTransaction(rho.networkParams, BitcoinUtils.decode(tx.value))

rule InterpretTransactionIDLiteral
    G |- TransactionIDLiteral tx |> Rho rho ~> ITransactionBuilder res
from {
    val id = tx.value
    val client = clientFactory.getBitcoinClient(rho.networkParams)

    try {
        val hex = client.getRawTransaction(id);
        res = ITransactionBuilder.fromSerializedTransaction(rho.networkParams, BitcoinUtils.decode(hex))
    }
    catch (Exception e) {
        fail
            error "Cannot interpret transaction with ID "+id+". Error: "+Throwables.getStackTraceAsString(e)
            source tx
    }
}

rule InterpretSignature
    G |- Signature s |> Rho rho ~> it.unica.tcs.lib.model.Signature res
from {
    { s.hasTx }

    G |- s.privkey |> rho ~> var PrivateKey key
    G |- s.tx |> rho ~> var ITransactionBuilder txBuilder

    try {
        val tx = txBuilder.toTransaction(s.ECKeyStore)
        val inputIndex = s.inputIdx
        val sigHashType = astUtils.toHashType(s.modifier)
        val anyonecanpay = astUtils.toAnyoneCanPay(s.modifier)
    
        val input = txBuilder.inputs.get(inputIndex)
        val outScript = input.parentTx.outputs.get(input.outIndex).script.build.program
    
        val sig = tx.calculateSignature(
            inputIndex,
            ECKey.fromPrivate(key.privateKeyByte),
            outScript,
            sigHashType,
            anyonecanpay
        )
        
        res = new it.unica.tcs.lib.model.Signature(sig.encodeToBitcoin, key.publicKeyByte)
    }
    catch (KeyStoreException e) {
        fail
            error "Error occurred when generating the keystore"
            source s
    }
}

axiom InterpretKeyLiteral
    G |- KeyLiteral key |> Rho rho ~> PrivateKey.fromBase58(key.value)

axiom InterpretAddressLiteral
    G |- AddressLiteral addr |> Rho rho ~> Address.fromBase58(addr.value)

axiom InterpretPubkeyLiteral
    G |- PubKeyLiteral k |> Rho rho ~> PublicKey.fromString(k.value, rho.networkParams)

rule InterpretTransaction
    G |- Transaction tx |> Rho rho ~> ITransactionBuilder res
from {
    val txBuilder = tx.compileTransaction(rho)

    if (!txBuilder.isReady) {
        fail
            error "Transaction must be ready"
            source tx
    }
    res = txBuilder
}

rule InterpretBitcoinValue
    G |- BitcoinValue btc |> Rho rho ~> Long result
from {
    G |- btc.unit |> rho ~> var Long unit

    unit = if (btc.isBtc)
        Math.multiplyExact(unit,100_000_000)
        else unit
    result = if (unit < 0)
        Math.subtractExact(unit,btc.decimal)
        else Math.addExact(unit, btc.decimal)
}

rule InterpretMinus
    G |- Minus minus |> Rho rho ~> Long result
from {
    G |- minus.left |> rho ~> var Long leftResult
    G |- minus.right |> rho ~> var Long rightResult
    result = Math.subtractExact(leftResult, rightResult)
}

rule InterpretTimes
    G |- Times minus |> Rho rho ~> Long result
from {
    G |- minus.left |> rho ~> var Long leftResult
    G |- minus.right |> rho ~> var Long rightResult
    result = Math.multiplyExact(leftResult, rightResult)
}

rule InterpretDiv
    G |- Div minus |> Rho rho ~> Long result
from {
    G |- minus.left |> rho ~> var Long leftResult
    G |- minus.right |> rho ~> var Long rightResult
    result = leftResult / rightResult
}

rule InterpretPlus
    G |- Plus plus |> Rho rho ~> Object result
from {
    G |- plus.left |> rho ~> var Object leftResult
    G |- plus.right |> rho ~> var Object rightResult

    {
        var left = leftResult as Long
        var right = rightResult as Long
        result = Math.addExact(left, right)
    }
    or {
        var left = leftResult as String
        var right = rightResult.toString
        result = left + right        
    }
}

rule InterpretArithmeticSigned
    G |- ArithmeticSigned signed |> Rho rho ~> Long result
from {
    G |- signed.exp |> rho ~> var Long expResult
    result = -(expResult)
}

rule InterpretAnd
    G |- AndExpression and |> Rho rho ~> Boolean result
from {
    {
        G |- and.left |> rho ~> var Boolean leftResult

        if (leftResult == false) {
            result = false
        }
        else {
            G |- and.right |> rho ~> var Boolean rightResult
            result = rightResult.booleanValue
        }
    } or {
        G |- and.right |> rho ~> var Boolean rightResult

        if (rightResult == false) {
            result = false
        }
        else {
            G |- and.left |> rho ~> var Boolean leftResult
            result = leftResult.booleanValue
        }
    }
}

rule InterpretOr
    G |- OrExpression orExp |> Rho rho ~> Boolean result
from {
    {
        G |- orExp.left |> rho ~> var Boolean leftResult

        if (leftResult == true) {
            result = true
        }
        else {
            G |- orExp.right |> rho ~> var Boolean rightResult
            result = rightResult.booleanValue
        }
    } or {
        G |- orExp.right |> rho ~> var Boolean rightResult

        if (rightResult == true) {
            result = true
        }
        else {
            G |- orExp.left |> rho ~> var Boolean leftResult
            result = leftResult.booleanValue
        }
    }
}

rule InterpretBooleanNegation
    G |- BooleanNegation neg |> Rho rho ~> Boolean result
from {
    G |- neg.exp |> rho ~> var Boolean expResult
    result = !expResult
}

rule InterpretComparison
    G |- Comparison comparison |> Rho rho ~> Boolean result
from {
    G |- comparison.left |> rho ~> var Comparable<Object> leftResult
    G |- comparison.right |> rho ~> var Object rightResult

    result = switch(comparison.op) {
            case ">=": leftResult >= rightResult
            case "<=": leftResult <= rightResult
            case ">": leftResult > rightResult
            case "<": leftResult < rightResult
            default: null
        }

    if (result===null) {
        fail
            error "Unexpected operator "+comparison.op
            source comparison
    }
}

rule InterpretEquals
    G |- Equals comparison |> Rho rho ~> Boolean result
from {

    {
        G |- comparison.left |> rho ~> var ITransactionBuilder leftResult
        G |- comparison.right |> rho ~> var ITransactionBuilder rightResult

        var areEqual = ITransactionBuilder.equals(leftResult,rightResult)

        result = switch(comparison.op) {
            case "==": areEqual
            case "!=": !areEqual
            default: null
        }

        if (result===null) {
            fail
                error "Unexpected operator "+comparison.op
                source comparison
        }

    } or {
        comparison.left instanceof Reference
        comparison.right instanceof Reference
        // two refs are the same if they point to the same parameter
        var leftResult = (comparison.left as Reference).ref
        var rightResult = (comparison.right as Reference).ref
        leftResult == rightResult

        result = switch(comparison.op) {
            case "==": true
            case "!=": false
            default: null
        }

        if (result===null) {
            fail
                error "Unexpecter operator "+comparison.op
                source comparison
        }

    } or {
        G |- comparison.left |> rho ~> var Object leftResult
        G |- comparison.right |> rho ~> var Object rightResult

        var areEqual = leftResult==rightResult

        result = switch(comparison.op) {
            case "==": areEqual
            case "!=": !areEqual
            default: null
        }

        if (result===null) {
            fail
                error "Unexpected operator "+comparison.op
                source comparison
        }
    }
}

rule InterpretIfThenElse
    G |- IfThenElse stmt |> Rho rho ~> Object result
from {
    G |- stmt.^if |> rho ~> var Boolean ifCondition

    if (ifCondition) {
        G |- stmt.then |> rho ~> var Object thenResult
        result = thenResult
    }
    else {
        G |- stmt.^else |> rho ~> var Object elseResult
        result = elseResult
    }
}

rule InterpretMin
    G |- Min stmt |> Rho rho ~> Long result
from {
    G |- stmt.left |> rho ~> var Long leftRes
    G |- stmt.right |> rho ~> var Long rightRes

    if (leftRes<=rightRes)
        result = leftRes
    else
        result = rightRes
}

rule InterpretMax
    G |- Max stmt |> Rho rho ~> Long result
from {
    G |- stmt.left |> rho ~> var Long leftRes
    G |- stmt.right |> rho ~> var Long rightRes

    if (leftRes>=rightRes)
        result = leftRes
    else
        result = rightRes
}

rule InterpretBetween
    G |- Between stmt |> Rho rho ~> Boolean result
from {
    G |- stmt.value |> rho ~> var Long valueRes
    G |- stmt.left |> rho ~> var Long leftRes
    G |- stmt.right |> rho ~> var Long rightRes
    result = leftRes<=valueRes && valueRes<rightRes
}

rule InterpretHash
    G |- it.unica.tcs.balzac.Hash hash |> Rho rho ~> Hash result
from {

    G |- hash.value |> rho ~> var Object expResult

    // hash the bytes
    if (hash instanceof Hash160)
        result = BitcoinUtils.hash(expResult, HashAlgorithm.HASH160)
    else if (hash instanceof Hash256)
        result = BitcoinUtils.hash(expResult, HashAlgorithm.HASH256)
    else if (hash instanceof Ripemd160)
        result = BitcoinUtils.hash(expResult, HashAlgorithm.RIPEMD160)
    else if (hash instanceof Sha256)
        result = BitcoinUtils.hash(expResult, HashAlgorithm.SHA256)
    else if (hash instanceof Sha1)
        result = BitcoinUtils.hash(expResult, HashAlgorithm.SHA1)
    else {
        fail
        error "Unexpected instance "+hash.class
        source hash
    }
}

rule InterpretSize
    G |- Size size |> Rho rho ~> Long result
from {
    G |- size.value |> rho ~> var Object res

    /*
     * Encode the number in MPI byte[], then return the size of the array.
     * Zero is encoded as an empty array, so its size is zero.
     *
     * size(0) == 0
     * size(n) == ⌈(log2 |n| + 1) / 7⌉
     */
    if (res instanceof Long) {
        result = Long.valueOf(Utils.encodeMPI(BigInteger.valueOf(res), false).length)
    }
    else if (res instanceof Boolean) {
        result = if (res) 1L else 0L
    }
    else if (res instanceof String) {
        result = Long.valueOf(res.length)
    }
    else {
        fail
        error "Unexpected instance "+res.class
        source size
    }
}

rule InterpretTransactionInputOperation
    G |- TransactionInputOperation op |> Rho rho ~> Long result
from {
    {
        op.tx instanceof This   // condition 1

        // compute result from the AST
        if (rho.isAlreadyVisited(op)) {
            fail
                error "Found cyclic dependency"
                source op
        }

        // check that evaluation of output values does not cause a loop
        rho.addVisited(op)
        val tx = EcoreUtil2.getContainerOfType(op, Transaction)
        var value = 0L;
        val indexes = if (op.indexes.^empty) 0 ..< tx.inputs.size else op.indexes.filter[i|i<tx.inputs.size].toSet
        for (idx : indexes) {
            val input = tx.inputs.get(idx)
            if (input.isPlaceholder) {
                value += 0
            }
            else {
                val outIdx = input.outpoint
                val inTx = input.txRef
                G |- inTx |> rho ~> var ITransactionBuilder inTxB
                value += inTxB.outputs.get(outIdx).value
            }
        }
        result = value;
        rho.removeVisited(op)
    }
    or {
        G |- op.tx |> rho ~> var ITransactionBuilder res
        val txB = res
        var value = 0L
        val indexes = if (op.indexes.^empty) 0 ..< txB.inputs.size else op.indexes.filter[i|i<txB.inputs.size].toSet
        for (idx : indexes) {
            val input = txB.inputs.get(idx)
            if (input.parentTx === null) {
                value += 0
            }
            else {
                val outIdx = input.outIndex
                val inTx = input.parentTx
                value += inTx.outputs.get(outIdx).value
            }
        }
        result = value;
    }
}

rule InterpretTransactionOutputOperation
    G |- TransactionOutputOperation op |> Rho rho ~> Long result
from {
    {
        op.tx instanceof This   // condition 1

        // compute result from the AST
        if (rho.isAlreadyVisited(op)) {
            fail
                error "Found cyclic dependency"
                source op
        }

        // check that evaluation of output values does not cause a loop
        rho.addVisited(op)
        val tx = EcoreUtil2.getContainerOfType(op, Transaction)
        var value = 0L
        val indexes = if (op.indexes.^empty) 0 ..< tx.outputs.size else op.indexes.filter[i|i<tx.outputs.size].toSet
        for (idx : indexes) {
            val vExp = tx.outputs.get(idx).value
            G |- vExp |> rho ~> var Long v
            value += v
        }
        result = value;
        rho.removeVisited(op)
    }
    or {
        G |- op.tx |> rho ~> var ITransactionBuilder res
        val txB = res
        var value = 0L
        val indexes = if (op.indexes.^empty) 0 ..< txB.outputs.size else op.indexes.filter[i|i<txB.outputs.size].toSet
        for (idx : indexes) {
            value += txB.outputs.get(idx).value
        }
        result = value;
    }
}

rule InterpretToAddress
    G |- ToAddress stmt |> Rho rho ~> Address result
from {
    G |- stmt.exp |> rho ~> var Address res
    // create a new Address because `res` could be either a PrivateKey or PublicKey or Address
    // and we want to lose this extra info
    result = Address.fromBase58(res.addressWif)
}

rule InterpretToPubkey
    G |- ToPubkey stmt |> Rho rho ~> PublicKey result
from {
    G |- stmt.exp |> rho ~> var PublicKey res
    // create a new PublicKey because `res` could be either a PrivateKey o PublicKey
    // and we want to lose this extra info
    result = PublicKey.fromBytes(res.publicKeyByte, rho.networkParams)
}

rule InterpretTransactionFees
    G |- TransactionFees op |> Rho rho ~> Long result
from {
    val txInputOp = BalzacFactory.eINSTANCE.createTransactionInputOperation
    val txOutputOp = BalzacFactory.eINSTANCE.createTransactionOutputOperation
    txInputOp.tx = EcoreUtil::copy(op.tx)
    txOutputOp.tx = EcoreUtil::copy(op.tx)
    G |- txInputOp |> rho ~> var Long inputValue
    G |- txOutputOp |> rho ~> var Long outputValue
    result = inputValue - outputValue
}

rule InterpretTransactionId
    G |- TransactionId op |> Rho rho ~> Hash result
from {
    G |- op.tx |> rho ~> var ITransactionBuilder txB
    
    try {
        val tx = txB.toTransaction(op.ECKeyStore)
        result = new Hash(tx.hash.bytes)
    }
    catch (KeyStoreException e) {
        fail
            error "Error occurred when generating the keystore"
            source op
    }
}

