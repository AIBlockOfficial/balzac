/*
 * Copyright 2017 Nicola Atzei
 */

grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
    
Model:
	package=PackageDeclaration?
//	imports+=Import*
	net=Network?
	declarations+=Element*
	compile=Compile?
;

PackageDeclaration:
    'package' name=QualifiedName;

QualifiedName: ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

Element: 
	Constant
|	TransactionDeclaration; 

Network: {Network} "network" (testnet?="testnet" | mainnet?="mainnet" | regtest?="regtest");

Parameter:
	name=ID 
	(":" type=PermittedType)?;

/*
 * transactions (special case of Declaration)
 */
 
Constant:
	"const" name=ID (":" type=PermittedType)? "=" exp=Expression;

TransactionDeclaration:
	checks+=OnDemandCheck*
	"transaction" name=ID ("(" (params+=Parameter ("," params+=Parameter)*)? ")")? "{"
		"input"  "=" (inputs+=(Input|InputPlaceholder)  | (isMultiIn?="["  inputs+=Input   (";" inputs+=Input)*   "]") )
		"output" "=" (outputs+=Output| (isMultiOut?="[" outputs+=Output (";" outputs+=Output)* "]") )
		("after" tlock=Tlock)?
	"}";

Input:
	txRef=Expression ("@" outpoint=LONG)? ":" exps+=AtomicExpression+ ("["redeemScript=Script"]")?;

InputPlaceholder returns Input:
	placeholder?="_";

Output:
	value=BitcoinValue ":" script=Script;

BitcoinValue:
	exp=Expression;

Tlock: times+=AbsoluteTime;

AbsoluteTime:
	block?="block" value=LONG | date?="date" value=TIMESTAMP;

RelativeTime:
	value=Delay "from" tx=Reference;

Script:
	(lambda?="fun"  "(" (params+=Parameter ("," params+=Parameter)*)? ")" ".")? exp=Expression;


/* on-demand checks */
OnDemandCheck:
	IsMinedCheck
|	IsNotMinedCheck;

IsMinedCheck: {IsMinedCheck} mined?="@isMined";
IsNotMinedCheck: {IsMinedCheck} "@isNotMined";


/*
 * script expressions
 */

Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} => '||' ) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*;

Comparison returns Expression:
	Equals (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
	Addition (({Equals.left=current} op=("==" | "!=") ) right=Addition)*;
 
Addition returns Expression:
    Multiply (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiply)*; 

Multiply returns Expression:
    Prefixed (({Times.left=current} '*' | {Div.left=current} '/') right=Prefixed)*;
    
Prefixed returns Expression:
    {BooleanNegation} =>"!" exp=AtomicExpression | /* right associativity */
    {ArithmeticSigned} =>"-" exp=AtomicExpression | /* right associativity */
    AtomicExpression;


AtomicExpression returns Expression:
'(' Expression ')' 
|	Literal
|	Reference

|	Hash
|   Signature 
|	Versig 
|	IfThenElse 
|	Min 
|   Max
|   Between
|   Size
|	AfterTimeLock
;

Reference: 
	ref=[Referrable|QualifiedName]
	( => "("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;

Referrable:
	Parameter 
|	TransactionDeclaration
|	Constant;

Literal:
	NumberLiteral 
|	StringLiteral
|	BooleanLiteral
|	HashLiteral
|	KeyLiteral
|	TransactionLiteral
|	SignatureLiteral;

HashLiteral:
	Hash160Literal
|	Hash256Literal
|	Ripemd160Literal
|	Sha256Literal;

NumberLiteral: value=Number;
StringLiteral: value=STRING;
BooleanLiteral: ^true?='true' | {BooleanLiteral} 'false';
Hash160Literal: value=HASH_160;
Hash256Literal: value=HASH_256;
Ripemd160Literal: value=RIPMED_160;
Sha256Literal: value=SHA_256;
KeyLiteral: value=WIF;
TransactionLiteral: value=(TXSERIAL|TXID);		// TXID is automatically converted into a hex by fetching the transaction from the network
SignatureLiteral: value=SIGHEX;

IfThenElse:
	'if' if=Expression
	"then" then=AtomicExpression
	'else' else=AtomicExpression;

Signature: "sig" "(" privkey=Expression ")" ("[" modifier=Modifier "]")? ("of" tx=AtomicExpression (=>"@" inputIdx=LONG)?)?;

enum Modifier: 
	AIAO 
|	AISO 
|	AINO
|	SIAO
|	SISO
|	SINO;
	
Versig:
	"versig" "(" 
		pubkeys+=Expression ("," pubkeys+=Expression)* ";"
		signatures+=Expression ("," signatures+=Expression)* 
	")";

Hash: Hash160 | Hash256 | Ripemd160 | Sha256;
Hash160: 	'hash160' "(" value=Expression ")";
Hash256: 	'hash256' "(" value=Expression ")";
Ripemd160: 	'ripemd160' "(" value=Expression ")";
Sha256: 	'sha256' "(" value=Expression ")";

Min: "min" "(" left=Expression "," right=Expression ")";
Max: "max" "(" left=Expression"," right=Expression ")";
Between: "between" "(" value=Expression "," left=Expression":" right=Expression ")";
Size: "size" "(" value=Expression ")";
AfterTimeLock: "after" timelock=AbsoluteTime ":" continuation=AtomicExpression;


Type:
	PermittedType 
|   {VoidType} value=VoidTypeEnum
|	{TypeVariable} value=ID;

PermittedType:
	{IntType} value=IntTypeEnum 
|	{StringType} value=StringTypeEnum 
|   {BooleanType} value=BoolTypeEnum
|	HashType
|   {KeyType} value=KeyTypeEnum
|   {AddressType} value=AddressTypeEnum
|   {TransactionType} value=TransactionTypeEnum
|   {SignatureType} value=SignatureTypeEnum;

HashType:
	{Hash160Type} value=Hash160TypeEnum
|	{Hash256Type} value=Hash256TypeEnum
|	{Ripemd160Type} value=Ripemd160TypeEnum
|	{Sha256Type} value=Sha256TypeEnum;



enum IntTypeEnum: int;
enum StringTypeEnum: string;
enum BoolTypeEnum: bool | boolean;
enum KeyTypeEnum: key;
enum AddressTypeEnum: address;
enum SignatureTypeEnum: signature;
enum TransactionTypeEnum: transaction;
enum Hash160TypeEnum: hash160;
enum Hash256TypeEnum: hash256;
enum Ripemd160TypeEnum: ripemd160;
enum Sha256TypeEnum: sha256;
enum VoidTypeEnum: void;

Typeable:
  Parameter
| Constant
| TransactionDeclaration
| Input
| Output 
| Expression
| Compile
;

Number returns ecore::ELong:
	LONG ('.' LONG)? "BTC"?
|	LONG_HEX;

Delay returns ecore::ELong:
	MinutesDelay | HoursDelay | DayDelay | BlockDelay;

MinutesDelay returns ecore::ELong: LONG "minutes";
HoursDelay   returns ecore::ELong: LONG "hours";
DayDelay     returns ecore::ELong: LONG "days";
BlockDelay   returns ecore::ELong: LONG "blocks";

terminal LONG_HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') 
	(('0'..'9'|'a'..'f'|'A'..'F'|'_')* ('0'..'9'|'a'..'f'|'A'..'F') )?;	// java-like hexadecimal number


terminal LONG returns ecore::ELong:
	'0'..'9' (('0'..'9'|'_')* '0'..'9')?  ; 	// java-like integer


terminal WIF: 
	'wif:' ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'J'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z')+;

terminal SHA_256 returns ecore::EByteArray:    'sha256:'    ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal RIPMED_160 returns ecore::EByteArray: 'ripemd160:' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_256 returns ecore::EByteArray:   'hash256:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_160 returns ecore::EByteArray:   'hash160:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXID returns ecore::EString:      'txid:' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXSERIAL returns ecore::EString:  'tx:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal SIGHEX returns ecore::EString:  'sig:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
	
terminal TIMESTAMP returns ecore::ELong: 
	YEAR '-' MONTH '-' DAY	// YYYY-MM-dd
	("T" HOUR ":" MINUTE 					// THH:mm
		(":" SECOND 						// :ss
			(OFFSET_SIGN OFFSET_HOUR ":" OFFSET_MINUTE)?	// +/- HH:mm
		)?
	)?;

terminal YEAR: ('1'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal MONTH: ('0'..'9')('1'..'9');
terminal DAY: ('0'..'9')('1'..'9');	 
terminal HOUR: ('0'..'2')('0'..'9');
terminal MINUTE: ('0'..'5')('0'..'9');
terminal SECOND: ('0'..'5')('0'..'9');
terminal OFFSET_SIGN: "+"|"-";
terminal OFFSET_HOUR: '0'('0'..'9') | '1'('0'..'2');
terminal OFFSET_MINUTE: '0''0' | '3''0';

@Override
terminal INT returns ecore::EInt: LONG;


Compile:
	{Compile} "compile" txs+=Reference*
;
	