/*
 * Time commitment - Andrychowicz
 */

package it.unica.btm.time_commitment

transaction T_fundsA { input = _ output = 20 BTC: fun(sigma) . versig(Alice.kA; sigma)}   
transaction T_fundsB { input = _ output = 20 BTC: fun(sigma) . versig(Bob.kB; sigma)} 

transaction T_commitA { 
	input = _
	output = 10 BTC: 
		fun(sigma1, sigma2, x:string).
			hash160(x) == hash160:9bc4f920cd2154cad285426b3fa1b18e823423d4 && versig(Alice.kA; sigma1)
			||
			versig(Alice.kA, Bob.kB; sigma1, sigma2)
}

transaction T_commitB { 
	input = _
	output = 10 BTC: 
		fun(sigma1, sigma2, x:string).
			hash160(x) == hash160:b9871797591d23183cd726d7d7d8ef4c31befbb9 && versig(Bob.kB; sigma1)
			||  
			versig(Alice.kA, Bob.kB; sigma1, sigma2)
}

transaction T_openA { 
	input = T_commitA: sig Alice.kA sig Alice.kA "secretA"
	output = 10 BTC - 10: fun(sigma) . versig(Alice.kA; sigma)
}

transaction T_openB {
	input = T_commitB: sig Bob.kB sig Bob.kB "secretB"
	output = 10 BTC - 10: fun(sigma) . versig(Alice.kA; sigma)
}



transaction T_payDepositA {
    input = T_commitA: sig Alice.kA sig Bob.kB ""
 	output = 10 BTC - 10: fun(sigma) . versig(Alice.kA; sigma)
	after block 45
}

transaction T_payDepositB {
    input = T_commitB: sig Alice.kA sig Bob.kB ""
 	output = 10 BTC - 10: fun(sigma) . versig(Bob.kB; sigma)
	after block 45 
}

transaction T_compute {
    input = _
	output =
		2 BTC: fun(sigma1, sigma2, xA:string, xB:string) . 
			hash160(xA) == hash160:9bc4f920cd2154cad285426b3fa1b18e823423d4 &&
			hash160(xB) == hash160:b9871797591d23183cd726d7d7d8ef4c31befbb9 &&
			(size(xA) == 128 || size(xA) == 127) && 
			(size(xB) == 128 || size(xB) == 127) &&
			if size(xA) == size(xB) 
			then versig(Alice.kA; sigma1)  
			else versig(Bob.kB; sigma2)
 
} 




participant Alice {
	t
//	put T_commitA {input = T_fundsA: sig kA }
//	-> send (do sig T_payDepositA kA to Bob)
//		
	let kA = wif:cSthBXr8YQAexpKeh22LB9PdextVE1UJeahmyns5LzcmMDSy59L4
	let secret = 5
}

participant Bob {
	t
	let kB = wif:cQtkW1zgFCckRYvJ2Nm8rryV825GyDJ51qoJCw72rhHG4YmGfYgZ
}

//
//contract CA  {
//	put T_commitA . send to PB: sig kA  . put T_openA
//}
//
//contract CB {
//	when T_commitA: 
//		receive from PA: sig kA . 
//		when after block 45 : 
//			put T_payDepositA
//}