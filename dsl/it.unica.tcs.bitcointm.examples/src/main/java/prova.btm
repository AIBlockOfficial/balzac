
package it.unica.btm.prova

network mainnet  

key kA = [
	"KzKP2XkH93yuXTLFPMYE89WvviHSmgKF3CjYKfpkZn6qij1pWuMW",		// mainnet, compressed, encoded (address)
	"1GT4D2wfwu7gJguvEdZXAKcENyPxinQqpz"]

key kB = [
	"KzKP2XkH93yuXTLFPMYE89WvviHSmgKF3CjYKfpkZn6qij1pWuMW",		// mainnet, compressed, encoded (address)
	"1GT4D2wfwu7gJguvEdZXAKcENyPxinQqpz"]
	
//key kA = [ 
//	"cQgNVSk8a7gAgtoWmmMMVU1zYwarS8Qw7Et1S6HG4tkqyU6FmFUC",		// testnet, compressed, encoded (address)
//	"mvy1W62ekvYw5oPXxCXtzEpZExzfhFxSn2"]
	 
  

transaction coinbase = _

transaction ALFA = {
	input = coinbase: true
	output = [
		1 BTC: fun(n) . n==42;			// P2SH
		1 BTC: fun(y) . versig(kB; y) && sig kA==sig kA;	// P2PKH
		0 BTC: "DATA"					// OP_RETURN 
	]
}

//transaction ALFA_serial = "01000000017acf6994b653ebddde17aeef1be904fc9bd60e05b8316a942de28fa8fd4244e9000000000151ffffffff0300e1f5050000000017a9144b72af382a4d07269c1379f937b17c0a4f25af448700e1f5050000000017a914a3f8ae3c775711c597ef7fdcfd5c3bfc2b6c47c4870000000000000000066a044441544100000000"
transaction ALFA_serial   = "01000000017acf6994b653ebddde17aeef1be904fc9bd60e05b8316a942de28fa8fd4244e9000000000151ffffffff0300e1f5050000000017a9144b72af382a4d07269c1379f937b17c0a4f25af448700e1f505000000001976a914a9776115106b0599bf5f6f82c22e83429babad4d88ac0000000000000000066a044441544100000000"


transaction T = {
	input = coinbase@0: sig kA AIAO
	output = [
		0.00000001 BTC:	fun(n) . n==42;
		0 BTC:		fun(n) . n=="abc";
		10:			fun(x:signature, y:signature) . y==x; 
		0 BTC:		fun(y1) . versig(kB; y1) && 2==1+1;
		0 BTC:		fun(y2, n2: int) . versig(kB; y2) && 2==n2
	]
 
	tlock = 97
}

transaction T1 = {
	input = [
		T@0: (0.00000042 BTC);
		T@1: if (12==10+2 && true) then "abc" else "xyz";
		T@2: sig kA AIAO sig kA;
		T@3: sig kA AIAO;
		T@4: sig kA AIAO 2; 
		
//		ALFA@0:	42 ;
//		ALFA@1:	sig kB;
		ALFA_serial@0:	42 [fun(n) . n==42];	// P2SH
		ALFA_serial@1:	sig kB
	]
	 
	output = [  
		4: 	(12-45) + 2147483647 + 214748_3647; 
		2:			fun (a) . a-45;
		1:			fun(). if (12==10+2) then 3 else 4 
	] 
}

 
/*
 * P2SH
 */ 

transaction A = {
	input = coinbase: 	true 
	output= 2BTC:		fun(n:int). n==45
}

transaction B = {
	input = A@0: (42+3)
	output= 1BTC: fun(n:int). n==43
} 
