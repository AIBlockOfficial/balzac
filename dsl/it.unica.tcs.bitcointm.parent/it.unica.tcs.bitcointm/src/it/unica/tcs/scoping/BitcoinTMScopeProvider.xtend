/*
 * generated by Xtext 2.11.0
 */
package it.unica.tcs.scoping

import it.unica.tcs.bitcoinTM.KeyDeclaration
import it.unica.tcs.bitcoinTM.ParticipantDeclaration
import it.unica.tcs.bitcoinTM.Script
import it.unica.tcs.bitcoinTM.SerialTransactionDeclaration
import it.unica.tcs.bitcoinTM.UserTransactionDeclaration
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BitcoinTMScopeProvider extends AbstractDeclarativeScopeProvider {

//	@Inject private extension IQualifiedNameProvider	

	/**
	 * utils: get a scope for the given clazz type within the whole document
	 */
	def static IScope getIScopeForAllContentsOfClass(EObject ctx, Class<? extends EObject> clazz){
		var root = EcoreUtil2.getRootContainer(ctx);						// get the root
		var candidates = EcoreUtil2.getAllContentsOfType(root, clazz);		// get all contents of type clazz
		return Scopes.scopeFor(candidates);									// return the scope
	}


	/*
	 * free-names resolution
	 */
	def IScope scope_Parameter(EObject ctx, EReference ref) {
//		println("Resolving variable: "+ref.name)
		return getDeclaredVariables(ctx.eContainer);
	}
		
	//utils: recursively get all free-names declarations until Script definition
	def dispatch IScope getDeclaredVariables(EObject cont) {
		return getDeclaredVariables(cont.eContainer);
	}
	
	def dispatch IScope getDeclaredVariables(Script obj) {
		return Scopes.scopeFor(
			obj.params,
			getDeclaredVariables(obj.eContainer)
		);
	}

	def dispatch IScope getDeclaredVariables(UserTransactionDeclaration obj) {
//		println("found parameters: "+obj.params.map[x|x.toString].reduce[p1, p2| (p1+", "+p2)]);
		return Scopes.scopeFor(obj.params); 	// stop recursion
	}	

	def dispatch IScope getDeclaredVariables(SerialTransactionDeclaration obj) {
//		println("found parameters: "+obj.params.map[x|x.toString].reduce[p1, p2| (p1+", "+p2)]);
		return Scopes.scopeFor(newArrayList); 	// stop recursion
	}	

	
	
	/**
	 * Key declarations are resolved within the same resource (file).
	 * <p>Keys are declared within a participant. If two participants
	 * use the same name for a key, the qualified name should be used
	 * (e.g. <code>Alice.k</code>)</p>
	 */
	def IScope scope_KeyDeclaration(EObject ctx, EReference ref) {
		var root = EcoreUtil2.getRootContainer(ctx);						// get the root
		var participants = EcoreUtil2.getAllContentsOfType(root, ParticipantDeclaration);
		
		val keysOccurrences = 	// a map for storing the number of occurrences of a key name 
								// (if > 1, more than one participant is using that name)
			EcoreUtil2.getAllContentsOfType(root, KeyDeclaration)		// all the keys declarations
			.groupBy[k|k.name]											// group by name within a map String -> List<Key>
			.entrySet													// to set
			.map[e|e.key->e.value.size]									// convert to String -> N
			.toMap([e|e.key],[e|e.value]);								// convert to a Map 
		
		val List<KeyDeclaration> candidates = newArrayList 
		for (p : participants) {
			candidates.addAll(p.keys)
		}
		
		Scopes.scopeFor(
			candidates, 
			[KeyDeclaration k|
				if (keysOccurrences.get(k.name)>1) {
					val participantName = (k.eContainer as ParticipantDeclaration).name
					QualifiedName.create(participantName, k.name)				
				}
				else {
					QualifiedName.create(k.name)
				}			
			], 
			Scopes.scopeFor(newArrayList))
	}
}
