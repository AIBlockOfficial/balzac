/*
 * Copyright 2017 Nicola Atzei
 */

/*
 * generated by Xtext 2.11.0
 */
package it.unica.tcs.scoping

import it.unica.tcs.bitcoinTM.ParticipantDeclaration
import it.unica.tcs.bitcoinTM.Receive
import it.unica.tcs.bitcoinTM.Script
import it.unica.tcs.bitcoinTM.SerialTransactionDeclaration
import it.unica.tcs.bitcoinTM.UserTransactionDeclaration
import it.unica.tcs.bitcoinTM.VariableDeclaration
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BitcoinTMScopeProvider extends AbstractDeclarativeScopeProvider {

//	@Inject private extension IQualifiedNameProvider	

	/**
	 * utils: get a scope for the given clazz type within the whole document
	 */
//	def static IScope getIScopeForAllContentsOfClass(EObject ctx, Class<? extends EObject> clazz){
//		var root = EcoreUtil2.getRootContainer(ctx);						// get the root
//		var candidates = EcoreUtil2.getAllContentsOfType(root, clazz);		// get all contents of type clazz
//		return Scopes.scopeFor(candidates);									// return the scope
//	}


	/*
	 * free-names resolution
	 */
	def IScope scope_Variable(EObject v, EReference ref) {
//		println("Resolving variable: "+v)
		return getScopeForParameters(v.eContainer);		
	}
	
	//utils: recursively get all free-names declarations until Script definition
	def dispatch IScope getScopeForParameters(EObject cont) {
		return getScopeForParameters(cont.eContainer);
	}
	
	def dispatch IScope getScopeForParameters(Script obj) {
//		println('''adding params: [«obj.params.map[p|p.name+":"+p.type].join(",")»] from script «obj»''')
		return Scopes.scopeFor(
			obj.params,
			getScopeForParameters(obj.eContainer)
		);
	}
	
	def dispatch IScope getScopeForParameters(Receive obj) {
		return Scopes.scopeFor(
			newArrayList(obj.^var),
			getScopeForParameters(obj.eContainer)
		);
	}

	def dispatch IScope getScopeForParameters(UserTransactionDeclaration obj) {
//		println('''adding params: [«obj.params.map[p|p.name+":"+p.type].join(",")»] from tx «obj.name»''')
		return Scopes.scopeFor(
			obj.params,
			getScopeForVariableDeclarations(obj.eContainer)
		); 	// stop recursion
	}	

	def dispatch IScope getScopeForParameters(SerialTransactionDeclaration obj) {
		return Scopes.scopeFor(
			newArrayList,
			getScopeForVariableDeclarations(obj.eContainer)
		); 	// stop recursion
	}

	
	
	/**
	 * Key declarations are resolved within the same resource (file).
	 * <p>Keys are declared within a participant. If two participants
	 * use the same name for a key, the qualified name should be used
	 * (e.g. <code>Alice.k</code>)</p>
	 */
	def IScope getScopeForVariableDeclarations(EObject ctx) {
		var root = EcoreUtil2.getRootContainer(ctx);						// get the root
		var participants = EcoreUtil2.getAllContentsOfType(root, ParticipantDeclaration);
		
//		val varsOccurrences = 	// a map for storing the number of occurrences of a key name 
//								// (if > 1, more than one participant is using that name)
//			EcoreUtil2.getAllContentsOfType(root, VariableDeclaration)	// all the keys declarations
//			.groupBy[k|k.name]											// group by name within a map String -> List<Key>
//			.entrySet													// to set
//			.map[e|e.key->e.value.size]									// convert to String -> N
//			.toMap([e|e.key],[e|e.value]);								// convert to a Map 
		
		val List<VariableDeclaration> candidates = newArrayList 
		for (p : participants) {
			candidates.addAll(p.variables)
		}
		
		Scopes.scopeFor(
			candidates, 
			[VariableDeclaration k|
				val participantName = (k.eContainer as ParticipantDeclaration).name
				QualifiedName.create(participantName, k.name)				
			], 
			Scopes.scopeFor(newArrayList))
	}
}
