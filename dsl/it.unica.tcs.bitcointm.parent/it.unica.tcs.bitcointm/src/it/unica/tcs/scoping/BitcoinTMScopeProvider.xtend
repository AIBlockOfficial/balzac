/*
 * generated by Xtext 2.11.0
 */
package it.unica.tcs.scoping

import it.unica.tcs.bitcoinTM.Script
import it.unica.tcs.bitcoinTM.SerialTransactionDeclaration
import it.unica.tcs.bitcoinTM.UserTransactionDeclaration
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BitcoinTMScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * utils: get a scope for the given clazz type within the whole document
	 */
	def static IScope getIScopeForAllContentsOfClass(EObject ctx, Class<? extends EObject> clazz){
		var root = EcoreUtil2.getRootContainer(ctx);						// get the root
		var candidates = EcoreUtil2.getAllContentsOfType(root, clazz);		// get all contents of type clazz
		return Scopes.scopeFor(candidates);									// return the scope
	}

//	override IScope getScope(EObject context, EReference reference) {
//		println("Hello")
//		return super.getScope(context, reference);
//	}

	/*
	 * free-names resolution
	 */
	def IScope scope_Parameter(EObject ctx, EReference ref) {
//		println("Resolving variable: "+ref.name)
		return getDeclaredVariables(ctx.eContainer);
	}
		
	//utils: recursively get all free-names declarations until Script definition
	def dispatch IScope getDeclaredVariables(EObject cont) {
		return getDeclaredVariables(cont.eContainer);
	}
	
	def dispatch IScope getDeclaredVariables(Script obj) {
		return Scopes.scopeFor(
			obj.params,
			getDeclaredVariables(obj.eContainer)
		);
	}

	def dispatch IScope getDeclaredVariables(UserTransactionDeclaration obj) {
//		println("found parameters: "+obj.params.map[x|x.toString].reduce[p1, p2| (p1+", "+p2)]);
		return Scopes.scopeFor(obj.params); 	// stop recursion
	}	

	def dispatch IScope getDeclaredVariables(SerialTransactionDeclaration obj) {
//		println("found parameters: "+obj.params.map[x|x.toString].reduce[p1, p2| (p1+", "+p2)]);
		return Scopes.scopeFor(newArrayList); 	// stop recursion
	}	

	
//	def IScope scope_TransactionDeclaration(EObject ctx, EReference ref) {
//		ctx.getIScopeForAllContentsOfClass(TransactionDeclaration);
//	}
//	
//	def IScope scope_KeyDeclaration(EObject ctx, EReference ref) {
//		ctx.getIScopeForAllContentsOfClass(KeyDeclaration);
//	}
}
