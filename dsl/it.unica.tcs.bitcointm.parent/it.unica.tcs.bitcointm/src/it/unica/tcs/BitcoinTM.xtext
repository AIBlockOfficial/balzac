/*
 * Copyright 2017 Nicola Atzei
 */

grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
    
Model:
	PackageDeclaration;

PackageDeclaration:
    'package' name=QualifiedName
    	imports+=Import*
		net=Network?
		declarations+=Declaration*
;

QualifiedName: ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

Declaration: 
  TransactionDeclaration
| ParticipantDeclaration; 

Network: {Network} "network" (testnet?="testnet" | mainnet?="mainnet" | regtest?="regtest");

/*
 * keys
 */
// KeyDeclaration: "key" name=ID "=" (value=WIF | placeholder?="_");

/*
 * transactions
 */
TransactionDeclaration:
	UserTransactionDeclaration | SerialTransactionDeclaration
;

UserTransactionDeclaration:
	"transaction" name=ID ("(" (params+=Parameter ("," params+=Parameter)*)? ")")? body=TransactionBody;

SerialTransactionDeclaration:
	isSerial?='serial' 'transaction' name=ID '=' (bytes=TXSERIAL | id=TXID);
	
TransactionBody: {TransactionBody} "{"
	("input"  "=" (inputs+=(Input|InputPlaceholder)  | (isMultiIn?="["  inputs+=Input   (";" inputs+=Input)*   "]") ))?
	("output" "=" (outputs+=Output| (isMultiOut?="[" outputs+=Output (";" outputs+=Output)* "]") ))?
	("after" tlock=Tlock)?
"}";


Input:
	txRef=TransactionReference ("@" outpoint=LONG)? ":" (exps+=ScriptAtomic)+ ("["redeemScript=Script"]")?;

InputPlaceholder returns Input:
	placeholder?="_";

Output:
	value=BitcoinValue ":" script=Script;

BitcoinValue:
	exp=ScriptExpression;

Tlock: times+=Time ("&&" times+=Time)*;

Time: AbsoluteTime | RelativeTime;

AbsoluteTime:
	block?="block" value=LONG | date?="date" value=TIMESTAMP;

RelativeTime:
	value=Delay "from" tx=[TransactionDeclaration];

TransactionReference:
	ref=[TransactionDeclaration] 
	("("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;

Script:
	(lambda?="fun"  "(" (params+=Parameter ("," params+=Parameter)*)? ")" ".")? exp=ScriptExpression;


Variable:
	Parameter | VariableDeclaration
;

Parameter:
	name=ID (":" type=ParameterType)?;

VariableDeclaration:
	"let" name=ID (":" type=ParameterType)? "=" value=Literal;


ExpressionI:            /* just to force some hierarchy and resolve ambiguity */
	"ε" ScriptExpression | "η" Expression;



/*
 * script expressions
 */
ScriptExpression:
    OrScriptExpression;

OrScriptExpression returns ScriptExpression:
	AndScriptExpression (({OrScriptExpression.left=current} => '||' ) right=AndScriptExpression)*;

AndScriptExpression returns ScriptExpression:
	ScriptComparison (({AndScriptExpression.left=current} '&&') right=ScriptComparison)*;

ScriptComparison returns ScriptExpression:
       ScriptEquals (({ScriptComparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=ScriptEquals)*;

ScriptEquals returns ScriptExpression:
       ScritpAddition (({ScriptEquals.left=current} op=("==" | "!=") ) right=ScritpAddition)*;
 
ScritpAddition returns ScriptExpression:
    ScriptPrefixed (({ScriptPlus.left=current} '+' | {ScriptMinus.left=current} '-') right=ScriptPrefixed)*; 

ScriptPrefixed returns ScriptExpression:
    {ScriptBooleanNegation} =>"!" exp=ScriptAtomic | /* right associativity */
    {ScriptArithmeticSigned} =>"-" exp=ScriptAtomic | /* right associativity */
    ScriptAtomic;

ScriptAtomic returns ScriptExpression:
    '(' ScriptExpression ')' 
|   Literal 
|   VariableReference

|   Signature 
|	Versig 
|	Hash 
|	IfThenElse 
|	Min 
|   Max
|   Between
|   Size
|	AfterTimeLock;

VariableReference: ref=[Variable|QualifiedName];

Literal:
	NumberLiteral 
|	StringLiteral
|	BooleanLiteral
|	HashLiteral
|	KeyLiteral;

HashLiteral:
	Hash160Literal
|	Hash256Literal
|	Ripemd160Literal
|	Sha256Literal
;

NumberLiteral: value=Number;
StringLiteral: value=STRING;
BooleanLiteral: ^true?='true' | {BooleanLiteral} 'false';
Hash160Literal: value=HASH_160;
Hash256Literal: value=HASH_256;
Ripemd160Literal: value=RIPMED_160;
Sha256Literal: value=SHA_256;
KeyLiteral: value=WIF;

IfThenElse:
	'if' if=ScriptExpression
	"then" then=ScriptAtomic
	'else' else=ScriptAtomic;

Signature: "sig" key=(Literal|VariableReference) (modifier=Modifier)?;

enum Modifier: 
	AIAO 
|	AISO 
|	AINO
|	SIAO 
|	SISO
|	SINO;
	
Versig:
	"versig" "(" 
		pubkeys+=(Literal|VariableReference) ("," pubkeys+=(Literal|VariableReference))* ";"
		signatures+=ScriptExpression ("," signatures+=ScriptExpression)* 
	")";

Hash: Hash160 | Hash256 | Ripemd160 | Sha256;
Hash160: 	'hash160' "(" value=ScriptExpression ")";
Hash256: 	'hash256' "(" value=ScriptExpression ")";
Ripemd160: 	'ripemd160' "(" value=ScriptExpression ")";
Sha256: 	'sha256' "(" value=ScriptExpression ")";

Min: "min" "(" left=ScriptExpression "," right=ScriptExpression ")";
Max: "max" "(" left=ScriptExpression"," right=ScriptExpression ")";
Between: "between" "(" value=ScriptExpression "," left=ScriptExpression":" right=ScriptExpression ")";
Size: "size" "(" value=ScriptExpression ")";
AfterTimeLock: "after" timelock=Time ":" continuation=ScriptAtomic;

ParameterType returns Type:
	BasicType;

Type:
	BasicType 
|	TypeVariable;

BasicType:
	{IntType} value=IntTypeEnum 
|	{StringType} value=StringTypeEnum 
|   {BooleanType} value=BoolTypeEnum
|   {KeyType} value=KeyTypeEnum
|   {SignatureType} value=SignatureTypeEnum
|	HashType;

HashType:
	{Hash160Type} value=Hash160TypeEnum
|	{Hash256Type} value=Hash256TypeEnum
|	{Ripemd160Type} value=Ripemd160TypeEnum
|	{Sha256Type} value=Sha256TypeEnum
;

TypeVariable:
	value=ID;

enum IntTypeEnum: int;
enum StringTypeEnum: string;
enum BoolTypeEnum: bool | boolean;
enum KeyTypeEnum: key;
enum SignatureTypeEnum: signature;
enum Hash160TypeEnum: hash160;
enum Hash256TypeEnum: hash256;
enum Ripemd160TypeEnum: ripemd160;
enum Sha256TypeEnum: sha256;

Typeable:
  TransactionDeclaration
| TransactionBody
| Variable
| Input
| Output 
| ParticipantDeclaration
| ProcessDeclaration
| ProcessReference
| Process
| Prefix
| ProtocolTransactionReference
| ExpressionI
;

Number returns ecore::ELong:
	LONG ('.' LONG)? "BTC"?
|	LONG_HEX;

Delay returns ecore::ELong:
	MinutesDelay | HoursDelay | DayDelay | BlockDelay;

MinutesDelay returns ecore::ELong: LONG "minutes";
HoursDelay   returns ecore::ELong: LONG "hours";
DayDelay     returns ecore::ELong: LONG "days";
BlockDelay   returns ecore::ELong: LONG "blocks";

terminal LONG_HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') 
	(('0'..'9'|'a'..'f'|'A'..'F'|'_')* ('0'..'9'|'a'..'f'|'A'..'F') )?;	// java-like hexadecimal number


terminal LONG returns ecore::ELong:
	'0'..'9' (('0'..'9'|'_')* '0'..'9')?  ; 	// java-like integer

terminal WIF: 
	'wif:' ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'J'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z')+;

terminal SHA_256 returns ecore::EByteArray:    'sha256:'    ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal RIPMED_160 returns ecore::EByteArray: 'ripemd160:' ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_256 returns ecore::EByteArray:   'hash256:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal HASH_160 returns ecore::EByteArray:   'hash160:'   ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXID:      'txid:'      ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXSERIAL:  'hex:'       ('0'..'9'|'a'..'f'|'A'..'F')+;
	
terminal TIMESTAMP returns ecore::ELong: 
	YEAR '-' MONTH '-' DAY	// YYYY-MM-dd
	("T" HOUR ":" MINUTE 					// THH:mm
		(":" SECOND 						// :ss
			(OFFSET_SIGN OFFSET_HOUR ":" OFFSET_MINUTE)?	// +/- HH:mm
		)?
	)?;

terminal YEAR: ('1'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal MONTH: ('0'..'9')('1'..'9');
terminal DAY: ('0'..'9')('1'..'9');	 
terminal HOUR: ('0'..'2')('0'..'9');
terminal MINUTE: ('0'..'5')('0'..'9');
terminal SECOND: ('0'..'5')('0'..'9');
terminal OFFSET_SIGN: "+"|"-";
terminal OFFSET_HOUR: '0'('0'..'9') | '1'('0'..'2');
terminal OFFSET_MINUTE: '0''0' | '3''0';


/*
 * Endpoints contracts
 */
ParticipantDeclaration: 'participant' name=ID '{' 
	(process=Process)? & (variables+=VariableDeclaration | /*keys+=KeyDeclaration |*/ defs+=ProcessDeclaration)*
'}';


ProcessDeclaration: 'process' name=ID ("(" (params+=Parameter ("," params+=Parameter)*)? ")")? '=' process=Process;
ProcessReference: ref=[ProcessDeclaration] ("("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;

Process:
  SingleChoice 
| ProtocolIfThenElse
| ProcessReference
| '(' Parallel ')'
;

Parallel returns Process:
	Process (({Parallel.left=current} => '|' ) right=Process)*;

Choice:
	actions+=Prefix ('+' actions+=Prefix)*;

SingleChoice returns Choice:
	actions+=Prefix;

NextProcess returns Process:
  SingleChoice
| ProtocolIfThenElse
| ProcessReference
| '(' Process ')'
;

Prefix:	(Ask|Put|Send|Receive|Assert|Tau) (';' next=NextProcess)?;

Tau: {Tau} 't';

Ask: "ask" (txRefs+=ProtocolTransactionReference
		|'{'(txRefs+=ProtocolTransactionReference ) (',' txRefs+=ProtocolTransactionReference)* '}') ;
	
Put: 'put' (
	  	txRefs+=ProtocolTransactionReference
		|'{'(txRefs+=ProtocolTransactionReference ) (',' txRefs+=ProtocolTransactionReference)* '}');

Send: 'send' message=Expression 'to' p=[ParticipantDeclaration];
Receive: 'receive' var=Parameter 'from' p=[ParticipantDeclaration];
Assert:	'check' exp=Expression;

ProtocolIfThenElse: 
'if' exp=Expression 
'then' then=NextProcess 
(=> 'else' else=NextProcess)?;

@Override
terminal INT returns ecore::EInt: LONG;

ProtocolTransactionReference:
	txRef=TransactionReference (substitution=TransactionBody)?;

Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} => '||' ) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*;

Comparison returns Expression:
    Equals (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
    Addition (({Equals.left=current} op=("==" | "!=") ) right=Addition)*;
 
Addition returns Expression:
    Multiply (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiply)*; 

Multiply returns Expression:
    Prefixed (({Times.left=current} '*' | {Div.left=current} '/') right=Prefixed)*; 


Prefixed returns Expression:
    {BooleanNegation} =>"!" exp=Atomic | /* right associativity */
    {ArithmeticSigned} =>"-" exp=Atomic | /* right associativity */
    Atomic;

Atomic returns Expression:
    '(' Expression ')' 
|   Literal 
|   VariableReference
|	Hash 
//|	SignOp		// signature operation, returns bytes or string 
//|	VersigOp	// versig operation, returns boolean
;

//SignOp:	"sig" key=[KeyDeclaration|QualifiedName] (modifier=Modifier)? "of" tx=ProtocolTransactionReference;
//VersigOp: "versig" "(" 
//		pubkeys+=[KeyDeclaration|QualifiedName] ("," pubkeys+=[KeyDeclaration|QualifiedName])* ";"
//		signatures+=ScriptExpression ("," signatures+=ScriptExpression)* ")" 
//		"using" tx=ProtocolTransactionReference;
		


//Regtest:
//	'regtest' '{'		
//		intructions+=Instruction
//	'}';
//
//Instruction:
//	MineBlocks | MineBlocks | SendTransaction;
//
//MineBlocks:
//	'mine' n=INT 'blocks';
//	
//SendTransaction:
//	'send' tx=[TransactionReference];
//
//ChargeKeys:
//	"charge" keys+=[VariableDeclaration]  ;
//
//GetBalance:
//	"balanceof" key=[VariableDeclaration];
//
//
//		