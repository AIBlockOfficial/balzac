grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

Model:
	transactions+=Element*;
	
Element:
	Key | TransactionDeclaration ;

	
TransactionDeclaration:
	"transaction" name=ID '=' ( ('{' body=TransactionBody	'}') | bytes=STRING );

TransactionBody:
	inputs+=Input+
	witnesses+=Witness+
	outputs+=Output+
	values+=Val+
	(tlock=Tlock)?
	;

Tlock: "tlock" INT;

Input: 
	"in" ("[" idx=INT "]")? "=" txref=[TransactionDeclaration];


Witness: 
	"wit" ("[" idx=INT "]")? "=" script=Script;

Output: 
	"out" ("[" idx=INT "]")? (params=Parameters)? "=" script=Script;


Val: 
	"val" ("[" idx=INT "]")? "=" value=Value;


Value:
	value=INT unit=("BTC"|"satoshi")?;

Parameters:
	"(" param+=Parameter ("," param+=Parameter)* ")"
;

Key: "key" name=ID "=" "(" private=STRING "," public=STRING ")";

Parameter:
	name=ID ":" paramType=Type
;

Script:
	Expression
;


Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} => '||' ) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*;

Comparison returns Expression:
       Equals (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
       Addition (({Equals.left=current} op=("==") ) right=Addition)*;
 
Addition returns Expression:
    Prefixed (({Plus.left=current} '+' | {Minus.left=current} '-') right=Prefixed)*; 

Prefixed returns Expression:
    {BooleanNegation} =>"!" exp=Atomic | /* right associativity */
    {ArithmeticSigned} =>"-" exp=Atomic | /* right associativity */
    Atomic;

Atomic returns Expression:
    '(' Expression ')' |
    NumberLiteral |
    StringLiteral |
    BooleanLiteral |
    {VariableReference} ref=[Parameter] |
    Signature |
	Versig |
	Hash |
	IfThenElse |
	Min | Max | Between |
	Size |
	AfterTimeLock;

NumberLiteral: value=INT;
StringLiteral: value=STRING;
BooleanLiteral: value=('true'|'false');

IfThenElse:
	'if' if=Expression
	"then" then=Atomic
	(=> 'else' else=Atomic)?;

Signature: "sig" key=[Key] (modifier=Modifier)?;

Modifier: "AIAO" | "AINO" | "AISO" | "SIAO" | "SINO" | "SISO";
	
Versig:
	"versig" "(" 
		"{" pubkeys+=[Key] ("," pubkeys+=[Key])* "}" ","
		"{" signatures+=Expression ("," signatures+=Expression)* "}" 
	")";

Hash: "hash" "(" value=Expression ")";

Min: "min" "(" left=Expression "," right=Expression ")";
Max: "max" "(" left=Expression"," right=Expression ")";
Between: "between" "(" value=Expression "," left=Expression":" right=Expression ")";
Size: "size" "(" value=Expression ")";
AfterTimeLock: "after" time=Expression ":" continuation=Atomic;



Type:
    {IntType} value='int' |
    {StringType} value='string' |
    {BooleanType} value=('boolean'|'bool') |
    {SignatureType} value='signature';
