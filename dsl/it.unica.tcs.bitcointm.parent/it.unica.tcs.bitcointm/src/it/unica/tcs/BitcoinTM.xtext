grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

Model:
	declarations+=(KeyDeclaration | TransactionDeclaration)*;
	
TransactionDeclaration:
	{TransactionDeclaration} "transaction" name=ID '=' ( ('{' body=TransactionBody	'}') | bytes=STRING );

KeyDeclaration: 
	{KeyDeclaration} "key" name=ID "=" "(" private=STRING "," public=STRING ")";

TransactionBody:
	input=Input
	witness=Witness
	output=Output
	value=Val
	(tlock=Tlock)?;

Input:   "in"    ":" (SingleInput   | MultipleInput);
Witness: "wit"   ":" (SingleWitness | MultipleWitness);
Output:  "out"   ":" (SingleOutput  | MultipleOutput);
Val:     "val"   ":" (SingleVal     | MultipleVal);
Tlock:   "tlock" ":" value=INT;


SingleInput returns Input:
	txs+=TransactionReference;

MultipleInput returns Input:
	multi?="[" txs+=TransactionReference ("," txs+=TransactionReference)* "]";

SingleWitness returns Witness: 
	scripts+=Script;

MultipleWitness returns Witness: 
	multi?="[" scripts+=Script ("," scripts+=Script)* "]";

SingleOutput returns Output:
	scripts+=Script;

MultipleOutput returns Output:
	multi?="[" scripts+=Script ("," scripts+=Script)* "]";

SingleVal returns Val: 
	values+=Value;

MultipleVal returns Val:
	multi?="[" values+=Value ("," values+=Value)* "]";



TransactionReference:
	txid=[TransactionDeclaration] "@" idx=INT;

Script:
	(lambda?="fun"  "(" (params+=Parameter ("," params+=Parameter)*)? ")" ".")? 
	exp=Expression;

Value:
	value=INT unit=("BTC"|"satoshi")?;

Parameter:
	name=ID (":" paramType=Type)?;



Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} => '||' ) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*;

Comparison returns Expression:
       Equals (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
       Addition (({Equals.left=current} op=("==") ) right=Addition)*;
 
Addition returns Expression:
    Prefixed (({Plus.left=current} '+' | {Minus.left=current} '-') right=Prefixed)*; 

Prefixed returns Expression:
    {BooleanNegation} =>"!" exp=Atomic | /* right associativity */
    {ArithmeticSigned} =>"-" exp=Atomic | /* right associativity */
    Atomic;

Atomic returns Expression:
    '(' Expression ')' |
    NumberLiteral |
    StringLiteral |
    BooleanLiteral |
    VariableReference |
    Signature |
	Versig |
	Hash |
	IfThenElse |
	Min | Max | Between |
	Size |
	AfterTimeLock;

VariableReference: ref=[Parameter];
NumberLiteral: value=INT;
StringLiteral: value=STRING;
BooleanLiteral: value=('true'|'false');

IfThenElse:
	'if' if=Expression
	"then" then=Atomic
	(=> 'else' else=Atomic)?;

Signature: "sig" key=[KeyDeclaration] (modifier=Modifier)?;

Modifier: "AIAO" | "AINO" | "AISO" | "SIAO" | "SINO" | "SISO";
	
Versig:
	"versig" "(" 
		pubkeys+=[KeyDeclaration] ("," pubkeys+=[KeyDeclaration])* ";"
		signatures+=Expression ("," signatures+=Expression)* 
	")";

Hash: "hash" "(" value=Expression ")";

Min: "min" "(" left=Expression "," right=Expression ")";
Max: "max" "(" left=Expression"," right=Expression ")";
Between: "between" "(" value=Expression "," left=Expression":" right=Expression ")";
Size: "size" "(" value=Expression ")";
AfterTimeLock: "after" time=Expression ":" continuation=Atomic;



Type:
	BasicType |
	TypeVariable;

BasicType:
	{IntType} value='int' |
    {StringType} value='string' |
    {BooleanType} value=('boolean'|'bool') |
    {SignatureType} value='signature';

TypeVariable:
	typevarName=ID;
